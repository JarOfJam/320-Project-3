(a) When it comes to planar graphs, you must look for any of the two examples where a graph is not planar. Those two examples are K5 and K3,3. By Kuratowski's Theorem, if any graph G (V,E) has a subset of K5 or K3,3, then G is nonplanar. The graphs of K5 and K3,3 have five and six vertices, respectively. Our program first checks if the graph has at least five vertices, since any graph with less than 5 vertices can not be K5 or K3,3. If there are exactly 5 vertices, we specifically check for K5 using Corollary 1. Corollary 1 is associated with Euler's theorem and states: Let G be a connected planar simple graph with n vertices, where n ≥ 3 and m edges. Then m ≤ 3n - 6. The user provides the program with how many vertices and edges they want, which makes checking Corollary 1 simple for five vertices and ten edges. For six and more vertices, the program selects every subset of five and six vertices and checks their connectivity for the connectivity of a K5 and K3,3 respectively. If the program finds a subset which matches K5 or K3,3, then we return a boolean false which dictates that the graph is nonplanar.

(b) Our time complexity for our algorithm is N choose 5 plus N choose 6 times 6 choose 3 divided by two, where N is the total number of vertices. Since we bound the user to a maximum of 20 vertices, our time complexity in the worst case is 15504 + 38760 * (20/2) = 403104, which is O(n^5). The best case is O(1) if there are N < 5 vertices, given we do not have to iterate to determine planarity.

(c) Our code could be more user friendly by asking for the two vertices to connect with an edge by reading their input as a pair. We could improve efficiency with recursion instead of having to iterate all possible vertices. 